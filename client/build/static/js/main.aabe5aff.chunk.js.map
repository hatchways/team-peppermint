{"version":3,"sources":["context/contacts/helper.js","themes/theme.js","App.js","serviceWorker.js","index.js","types.js","context/user/userReducer.js","context/user/helper.js","context/user/userContext.js","socket-client/socket.js","context/contacts/contactsInvitationsReducer.js","context/contacts/contactsContext.js","context/conversations/conversationsReducer.js","context/conversations/helper.js","context/conversations/conversationsContext.js"],"names":["jwtDecode","require","fetchContactsAndInvitations","email","dispatch","a","axios","get","userData","data","Error","type","FETCH_CONTACTS_INVITATIONS","payload","contacts","contactsList","invitations","invitationsList","deleteContact","userEmail","emailToDelete","delete","approveContact","contactToApprove","post","message","rejectContact","emailToReject","contactToReject","newInvitationsList","UPDATE_INVITATIONS","createInvitation","referrer","res","updateContacts","contactCurrentStatus","isOnline","UPDATE_CONTACTS","console","log","findContacts","query","Object","keys","foundContactsList","length","addUknownUser","unknownEmail","unknownUsers","ADD_UKNOWN_USER","resetContactsInvitationsLists","RESET_LISTS","userEmailFromLocalStorage","userToken","localStorage","getItem","decodedToken","id","theme","createMuiTheme","typography","fontFamily","fontSize","h1","palette","primary","main","MainPage","lazy","LoginPage","SignupPage","config","App","useUserDispatch","useEffect","token","setItem","Axios","process","REACT_APP_BACKEND_URL","headers","socket","emit","fetchUserData","checkLoggedIn","window","addEventListener","e","preventDefault","fallback","Box","component","style","display","justifyContent","alignItems","width","minHeight","CircularProgress","size","thickness","CssBaseline","Container","maxWidth","margin","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","FETCH_USER_DATA","UPDATE_USER_IMAGE","SET_USER_DATA","FETCH_CONVERSATIONS","RESET_CONVERSATIONS","userReducer","state","action","user","pictureURL","imageUrl","userRes","setUserData","UserStateContext","React","createContext","UserDispatchContext","UserProvider","children","useReducer","name","language","url","Provider","value","useUserState","useContext","openSocket","contactsInvitaitionsReducer","ContactsStateContext","ContactsDispatchContext","ContactsProvider","useContactsState","useContactsDispatch","conversationsReducer","conversations","fetchConversations","conversationsRes","resetConversations","ConversationsStateContext","ConversationsDispatchContext","ConversationsProvider","useConversationsState","useConversationsDispatch"],"mappings":"yjBASMA,EAAYC,EAAQ,KAEbC,EAA2B,uCAAG,WAAOC,EAAOC,GAAd,eAAAC,EAAA,sEAClBC,IAAMC,IAAN,gBAAmBJ,EAAnB,cADkB,WACnCK,EADmC,QAE3BC,KAF2B,sBAGjCC,MAAM,2BAH2B,OAMzCN,EAAS,CACPO,KAAMC,IACNC,QAAS,CACPC,SAAUN,EAASC,KAAKM,aACxBC,YAAaR,EAASC,KAAKQ,mBAVU,2CAAH,wDAe3BC,EAAa,uCAAG,WAAOC,EAAWC,EAAehB,GAAjC,SAAAC,EAAA,sEACJC,IAAMe,OAAN,eAAqBF,EAArB,aAA2C,CAChEV,KAAM,CACJW,mBAHuB,iBAMbX,KANa,sBAOnBC,MAAM,kCAPa,OAS3BR,EAA4BiB,EAAWf,GATZ,2CAAH,0DAYbkB,EAAc,uCAAG,WAAOH,EAAWI,EAAkBnB,GAApC,SAAAC,EAAA,+EAEpBC,IAAMkB,KAAN,eAAmBL,EAAnB,YAAwC,CAC5CV,KAAM,CACJc,sBAJsB,OAQ1BrB,EAA4BiB,EAAWf,GARb,qDAUpBM,MAAM,8BAA+B,KAAIe,SAVrB,wDAAH,0DAcdC,EAAa,uCAAG,WAAOP,EAAWQ,EAAevB,GAAjC,eAAAC,EAAA,+EAEnBC,IAAMkB,KAAN,eAAmBL,EAAnB,WAAuC,CAC3CV,KAAM,CACJmB,gBAAiBD,KAJI,uBAQQrB,IAAMC,IAAN,eAAkBY,EAAlB,iBARR,OAQnBU,EARmB,OAUzBzB,EAAS,CAAEO,KAAMmB,IAAoBjB,QAASgB,IAVrB,sDAYnBnB,MAAM,8BAA+B,KAAIe,SAZtB,yDAAH,0DAgBbM,EAAgB,uCAAG,WAAOZ,EAAWa,GAAlB,eAAA3B,EAAA,+EAEVC,IAAMkB,KAAN,eAAmBL,EAAnB,WAAuC,CACvDa,aAH0B,cAEtBC,EAFsB,yBAKrBA,EAAIxB,MALiB,sCAOtBC,MAAM,8BAA+B,KAAIe,SAPnB,yDAAH,wDAWhBS,EAAc,uCAAG,WAC5BC,EACArB,EACAV,GAH4B,SAAAC,EAAA,+DAMtBS,EAASqB,EAAqB,MAChCrB,EAASqB,EAAqB,IAAIC,SAAWD,EAAqB,GAClE/B,EAAS,CACPO,KAAM0B,IACNxB,QAASC,KAVa,qDAc1BwB,QAAQC,IAAR,MACM7B,MAAM,8BAA+B,KAAIe,SAfrB,wDAAH,0DAmBde,EAAY,uCAAG,WAAOrB,EAAWsB,EAAOrC,GAAzB,eAAAC,EAAA,+EAENC,IAAMkB,KAAN,eAAmBL,EAAnB,WAAuC,CACvDsB,UAHsB,UAElBR,EAFkB,SAMpBS,OAAOC,KAAKV,EAAIxB,KAAKmC,mBAAmBC,OAAS,GAN7B,uBAOtBzC,EAAS,CACPO,KAAM0B,IACNxB,QAASoB,EAAIxB,KAAKmC,oBATE,mBAWf,GAXe,iCAaf,GAbe,gEAgBxBN,QAAQC,IAAR,MACM7B,MAAM,8BAA+B,KAAIe,SAjBvB,0DAAH,0DAoBZqB,EAAa,uCAAG,WAAOC,EAAcC,EAAc5C,GAAnC,eAAAC,EAAA,+EAEPC,IAAMC,IAAN,oBAAuBwC,EAAvB,MAFO,QAEnBd,EAFmB,QAGjBxB,OACNuC,EAAaD,GAAgBd,EAAIxB,KAAKsC,GACtC3C,EAAS,CACPO,KAAMsC,IACNpC,QAASmC,KAPY,sDAWzBV,QAAQC,IAAR,MACM7B,MAAM,8BAA+B,KAAIe,SAZtB,yDAAH,0DAgBbyB,EAAgC,SAAC9C,GAC5CA,EAAS,CACPO,KAAMwC,OAIGC,EAA4B,WACvC,IAAMC,EAAYC,aAAaC,QAAQ,cACnCC,EAAe,uBAInB,OAHIH,IACFG,EAAexD,EAAUqD,IAEpBG,EAAaC,K,wKChJTC,EAAQC,YAAe,CAClCC,WAAY,CACVC,WAAY,wBACZC,SAAU,GACVC,GAAI,IAINC,QAAS,CACPC,QAAS,CAAEC,KAAM,c,8ECKfC,EAAWC,gBAAK,kBAAM,8DACtBC,EAAYD,gBAAK,kBAAM,8DACvBE,EAAaF,gBAAK,kBAAM,8DAEfnE,EAAQ,KAChBsE,SAyEQC,MAvEf,WACE,IAAMpE,EAAWqE,cACXtE,EAAQiD,cAoCd,OAlCAsB,qBAAU,YACW,uCAAG,4BAAArE,EAAA,6DAGN,QAFVsE,EAAQrB,aAAaC,QAAQ,iBAG/BD,aAAasB,QAAQ,aAAc,IACnCD,EAAQ,IALU,SAQGE,IAAMrD,KAAN,UAClBsD,mHAAYC,sBADM,0BAErB,KACA,CACEC,QAAS,CAAE,eAAgBL,KAZX,cAePlE,OACXwE,IAAOC,KAAK,QAAS/E,GACrBgF,YAAc/E,IAjBI,2CAAH,qDAoBnBgF,GACAH,IAAOC,KAAK,QAAS/E,KAEpB,CAACC,EAAUD,IAEduE,qBAAU,WACRW,OAAOC,iBAAiB,gBAAgB,SAAUC,GAChDA,EAAEC,iBAEFP,IAAOC,KAAK,SAAU/E,QAEvB,CAACA,IAGF,kBAAC,IAAD,CAAkBuD,MAAOA,GACvB,kBAAC,WAAD,CACE+B,SACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,MAAO,OACPC,UAAW,UAGb,kBAACC,EAAA,EAAD,CAAkBC,KAAM,GAAIC,UAAW,MAI3C,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,KAAKX,MAAO,CAAEY,OAAQ,SACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIf,UAAWxB,IACjC,kBAAC,IAAD,CAAOuC,KAAK,SAASf,UAAWtB,IAChC,kBAAC,IAAD,CAAOqC,KAAK,UAAUf,UAAWrB,UCzE3BqC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2D,oBCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+BEnInB,oVAAO,IAAM5G,EAA6B,6BAE7BkB,EAAqB,qBACrBO,EAAkB,kBAClBoF,EAAkB,kBAClBC,EAAoB,oBACpBC,EAAgB,gBAChBxE,EAAc,cACdyE,EAAsB,sBAEtBC,EAAsB,sBACtB5E,EAAkB,mB,oPCThB,SAAS6E,EAAYC,EAAOC,GACzC,OAAQA,EAAOrH,MACb,KAAKgH,IACL,KAAKF,IACH,OAAO,2BACFM,GADL,IAEEpD,MAAOqD,EAAOnH,QAAQ8D,MACtBsD,KAAMD,EAAOnH,QAAQoH,OAGzB,KAAKP,IACH,OAAO,2BACFK,GADL,IAEEE,KAAK,2BAAMF,EAAME,MAAb,IAAmBC,WAAYF,EAAOnH,QAAQsH,aAGtD,QACE,OAAOJ,G,2CChBA5C,EAAa,uCAAG,WAAO/E,GAAP,iBAAAC,EAAA,6DACvBsE,EAAQrB,aAAaC,QAAQ,cADN,SAGLjD,IAAMC,IAAI,aAAc,CAC5CyE,QAAS,CAAE,eAAgBL,KAJF,OAGrByD,EAHqB,OAM3BhI,EAAS,CACPO,KAAM8G,IACN5G,QAAS,CACP8D,MAAOA,EACPsD,KAAMG,EAAQ3H,QAVS,2CAAH,sDAeb4H,EAAc,SAAC1D,EAAOsD,EAAM7H,GACvCA,EAAS,CACPO,KAAMgH,IACN9G,QAAS,CACP8D,QACAsD,WCnBAK,EAAmBC,IAAMC,gBACzBC,EAAsBF,IAAMC,gBAElC,SAASE,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SAAY,EACRC,qBAAWd,EAAa,CAChDnD,MAAO,GACPsD,KAAM,CACJxE,GAAI,GACJoF,KAAM,GACN1I,MAAO,GACP2I,SAAU,GACVZ,WAAY,CAAEa,IAAK,OARW,mBAC3BhB,EAD2B,KACpB3H,EADoB,KAWlC,OACE,kBAACkI,EAAiBU,SAAlB,CAA2BC,MAAOlB,GAChC,kBAACU,EAAoBO,SAArB,CAA8BC,MAAO7I,GAClCuI,GAC6B,KAKtC,SAASO,IAEP,OADgBC,qBAAWb,GAI7B,SAAS7D,IAEP,OADgB0E,qBAAWV,K,gCCjC7B,YAEMxD,EAFN,MAEemE,GAAW,GAAD,OAAItE,mHAAYC,wBAC1BE,O,whBCKA,SAASoE,EAA4BtB,EAAOC,GACzD,OAAQA,EAAOrH,MACb,KAAKC,IACH,OAAO,2BACFmH,GADL,IAEEjH,SAAUkH,EAAOnH,QAAQC,SACzBE,YAAagH,EAAOnH,QAAQG,cAGhC,KAAKc,IACH,OAAO,2BACFiG,GADL,IAEE/G,YAAagH,EAAOnH,UAGxB,KAAKwB,IACH,OAAO,2BACF0F,GADL,IAEEjH,SAAUkH,EAAOnH,UAGrB,KAAKoC,IACH,OAAO,2BACF8E,GADL,IAEE/E,aAAcgF,EAAOnH,UAGzB,KAAKsC,IACH,MAAO,CACLrC,SAAU,GACVE,YAAa,GACbgC,aAAc,IAIlB,QACE,OAAO+E,G,YC7BPuB,EAAuBf,IAAMC,gBAC7Be,EAA0BhB,IAAMC,gBAEtC,SAASgB,EAAT,GAAyC,IAAbb,EAAY,EAAZA,SAAY,EACZC,qBAAWS,EAA6B,CAChEvI,SAAU,GACVE,YAAa,GACbgC,aAAc,KAJsB,mBAC/B+E,EAD+B,KACxB3H,EADwB,KAOtC,OACE,kBAACkJ,EAAqBN,SAAtB,CAA+BC,MAAOlB,GACpC,kBAACwB,EAAwBP,SAAzB,CAAkCC,MAAO7I,GACtCuI,IAMT,SAASc,IAEP,OADgBN,qBAAWG,GAG7B,SAASI,IAEP,OADgBP,qBAAWI,K,6OCrCd,SAASI,EAAqB5B,EAAOC,GAChD,OAAQA,EAAOrH,MACX,KAAKiH,IACD,MAAO,CACHgC,cAAe5B,EAAOnH,QAAQ+I,eAGtC,KAAK/B,IACD,MAAO,CACH+B,cAAe,IAGvB,QACI,OAAO7B,G,2CCZN8B,EAAkB,uCAAG,WAAO1J,EAAOC,GAAd,eAAAC,EAAA,sEACCC,IAAMC,IAAN,gBAAmBJ,EAAnB,mBADD,WACxB2J,EADwB,QAERrJ,KAFQ,sBAGpBC,MAAM,2BAHc,OAK9BN,EAAS,CACLO,KAAMiH,IACN/G,QAAS,CACL+I,cAAeE,EAAiBrJ,QARV,2CAAH,wDAalBsJ,EAAqB,SAAC3J,GAC/BA,EAAS,CACLO,KAAMkH,OCdRmC,EAA4BzB,IAAMC,gBAClCyB,EAA+B1B,IAAMC,gBAE3C,SAAS0B,EAAT,GAA8C,IAAbvB,EAAY,EAAZA,SAAY,EACjBC,qBAAWe,EAAsB,CACzDC,cAAe,KAF0B,mBACpC7B,EADoC,KAC7B3H,EAD6B,KAK3C,OACE,kBAAC4J,EAA0BhB,SAA3B,CAAoCC,MAAOlB,GACzC,kBAACkC,EAA6BjB,SAA9B,CAAuCC,MAAO7I,GAC3CuI,IAMT,SAASwB,IAEP,OADgBhB,qBAAWa,GAG7B,SAASI,IAEP,OADgBjB,qBAAWc,M","file":"static/js/main.aabe5aff.chunk.js","sourcesContent":["import {\n  FETCH_CONTACTS_INVITATIONS,\n  UPDATE_INVITATIONS,\n  UPDATE_CONTACTS,\n  RESET_LISTS,\n  ADD_UKNOWN_USER,\n} from \"../../types\";\nimport axios from \"axios\";\n\nconst jwtDecode = require(\"jwt-decode\");\n\nexport const fetchContactsAndInvitations = async (email, dispatch) => {\n  const userData = await axios.get(`/user/${email}/contacts`);\n  if (!userData.data) {\n    throw Error(\"Oops, no contacts found\");\n  }\n\n  dispatch({\n    type: FETCH_CONTACTS_INVITATIONS,\n    payload: {\n      contacts: userData.data.contactsList,\n      invitations: userData.data.invitationsList,\n    },\n  });\n};\n\nexport const deleteContact = async (userEmail, emailToDelete, dispatch) => {\n  const contacts = await axios.delete(`user/${userEmail}/contacts`, {\n    data: {\n      emailToDelete,\n    },\n  });\n  if (!contacts.data) {\n    throw Error(\"Oops, failed to delete contact\");\n  }\n  fetchContactsAndInvitations(userEmail, dispatch);\n};\n\nexport const approveContact = async (userEmail, contactToApprove, dispatch) => {\n  try {\n    await axios.post(`user/${userEmail}/approve`, {\n      data: {\n        contactToApprove,\n      },\n    });\n\n    fetchContactsAndInvitations(userEmail, dispatch);\n  } catch (err) {\n    throw Error(\"Oops, something went wrong \", err.message);\n  }\n};\n\nexport const rejectContact = async (userEmail, emailToReject, dispatch) => {\n  try {\n    await axios.post(`user/${userEmail}/reject`, {\n      data: {\n        contactToReject: emailToReject,\n      },\n    });\n\n    const newInvitationsList = await axios.get(`user/${userEmail}/invitations`);\n\n    dispatch({ type: UPDATE_INVITATIONS, payload: newInvitationsList });\n  } catch (err) {\n    throw Error(\"Oops, something went wrong \", err.message);\n  }\n};\n\nexport const createInvitation = async (userEmail, referrer) => {\n  try {\n    const res = await axios.post(`user/${userEmail}/invite`, {\n      referrer,\n    });\n    return res.data;\n  } catch (err) {\n    throw Error(\"Oops, something went wrong \", err.message);\n  }\n};\n\nexport const updateContacts = async (\n  contactCurrentStatus,\n  contacts,\n  dispatch\n) => {\n  try {\n    if (contacts[contactCurrentStatus[0]]) {\n      contacts[contactCurrentStatus[0]].isOnline = contactCurrentStatus[1];\n      dispatch({\n        type: UPDATE_CONTACTS,\n        payload: contacts,\n      });\n    }\n  } catch (err) {\n    console.log(err);\n    throw Error(\"Oops, something went wrong \", err.message);\n  }\n};\n\nexport const findContacts = async (userEmail, query, dispatch) => {\n  try {\n    const res = await axios.post(`user/${userEmail}/search`, {\n      query,\n    });\n\n    if (Object.keys(res.data.foundContactsList).length > 0) {\n      dispatch({\n        type: UPDATE_CONTACTS,\n        payload: res.data.foundContactsList,\n      });\n      return true;\n    } else {\n      return false;\n    }\n  } catch (err) {\n    console.log(err);\n    throw Error(\"Oops, something went wrong \", err.message);\n  }\n};\nexport const addUknownUser = async (unknownEmail, unknownUsers, dispatch) => {\n  try {\n    const res = await axios.get(`/api/user/${unknownEmail}/`);\n    if (res.data) {\n      unknownUsers[unknownEmail] = res.data[unknownEmail];\n      dispatch({\n        type: ADD_UKNOWN_USER,\n        payload: unknownUsers,\n      });\n    }\n  } catch (err) {\n    console.log(err);\n    throw Error(\"Oops, something went wrong \", err.message);\n  }\n};\n\nexport const resetContactsInvitationsLists = (dispatch) => {\n  dispatch({\n    type: RESET_LISTS,\n  });\n};\n\nexport const userEmailFromLocalStorage = () => {\n  const userToken = localStorage.getItem(\"auth-token\");\n  let decodedToken = \"Oops, no email found\";\n  if (userToken) {\n    decodedToken = jwtDecode(userToken);\n  }\n  return decodedToken.id;\n};\n","import { createMuiTheme } from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n  typography: {  \n    fontFamily: \"Open sans, sans-serif\",\n    fontSize: 16,\n    h1: {\n      // could customize the h1 variant as well\n    },\n  },\n  palette: {\n    primary: { main: \"#3A8DFF\" },\n  },\n});\n","import React, { useEffect, Suspense, lazy } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { theme } from \"./themes/theme\";\nimport { useUserDispatch, fetchUserData } from \"./context/user/userContext\";\nimport {\n  MuiThemeProvider,\n  Container,\n  CssBaseline,\n  CircularProgress,\n  Box,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport { userEmailFromLocalStorage } from \"./context/contacts/helper\";\nimport socket from \"./socket-client/socket\";\n\nconst MainPage = lazy(() => import(\"./containers/MainPage\"));\nconst LoginPage = lazy(() => import(\"./containers/LoginPage\"));\nconst SignupPage = lazy(() => import(\"./containers/SignupPage\"));\n\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\nfunction App() {\n  const dispatch = useUserDispatch();\n  const email = userEmailFromLocalStorage();\n\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      let token = localStorage.getItem(\"auth-token\");\n\n      if (token === null) {\n        localStorage.setItem(\"auth-token\", \"\");\n        token = \"\";\n      }\n\n      const tokenRes = await Axios.post(\n        `${process.env.REACT_APP_BACKEND_URL}/api/user/tokenIsValid`,\n        null,\n        {\n          headers: { \"x-auth-token\": token },\n        }\n      );\n      if (tokenRes.data) {\n        socket.emit(\"login\", email);\n        fetchUserData(dispatch);\n      }\n    };\n    checkLoggedIn();\n    socket.emit(\"login\", email);\n\n  }, [dispatch, email]);\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", function (e) {\n      e.preventDefault();\n      // e.returnValue = null;\n      socket.emit(\"logout\", email);\n    });\n  }, [email]);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Suspense\n        fallback={\n          <Box\n            component=\"div\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              width: \"100%\",\n              minHeight: \"100vh\",\n            }}\n          >\n            <CircularProgress size={50} thickness={4} />\n          </Box>\n        }\n      >\n        <Router>\n          <CssBaseline />\n          <Container maxWidth=\"lg\" style={{ margin: \"auto\" }}>\n            <Switch>\n              <Route exact path=\"/\" component={MainPage} />\n              <Route path=\"/login\" component={LoginPage} />\n              <Route path=\"/signup\" component={SignupPage} />\n            </Switch>\n          </Container>\n        </Router>\n      </Suspense>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { UserProvider } from \"./context/user/userContext\";\nimport { ContactsProvider } from \"./context/contacts/contactsContext\";\nimport { ConversationsProvider } from \"./context/conversations/conversationsContext\";\n\nReactDOM.render(\n  <UserProvider>\n    <ContactsProvider>\n      <ConversationsProvider>\n        <App />\n      </ConversationsProvider>\n    </ContactsProvider>\n  </UserProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const FETCH_CONTACTS_INVITATIONS = \"FETCH_CONTACTS_INVITATIONS\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const UPDATE_INVITATIONS = \"UPDATE_INVITATIONS\";\nexport const UPDATE_CONTACTS = \"UPDATE_CONTACTS\";\nexport const FETCH_USER_DATA = \"FETCH_USER_DATA\";\nexport const UPDATE_USER_IMAGE = \"UPDATE_USER_IMAGE\";\nexport const SET_USER_DATA = \"SET_USER_DATA\";\nexport const RESET_LISTS = \"RESET_LISTS\";\nexport const FETCH_CONVERSATIONS = \"FETCH_CONVERSATIONS\";\nexport const UPDATE_CONVERSATIONS = \"UPDATE_CONVERSATIONS\";\nexport const RESET_CONVERSATIONS = \"RESET_CONVERSATIONS\";\nexport const ADD_UKNOWN_USER = \"ADD_UKNOWN_USER\";","import { FETCH_USER_DATA, UPDATE_USER_IMAGE, SET_USER_DATA } from \"../../types\";\n\nexport default function userReducer(state, action) {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case FETCH_USER_DATA: {\n      return {\n        ...state,\n        token: action.payload.token,\n        user: action.payload.user,\n      };\n    }\n    case UPDATE_USER_IMAGE: {\n      return {\n        ...state,\n        user: { ...state.user, pictureURL: action.payload.imageUrl },\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { FETCH_USER_DATA, SET_USER_DATA, UPDATE_USER_IMAGE } from \"../../types\";\nimport axios from \"axios\";\n\nexport const fetchUserData = async (dispatch) => {\n  let token = localStorage.getItem(\"auth-token\");\n\n  const userRes = await axios.get(\"/api/user/\", {\n    headers: { \"x-auth-token\": token },\n  });  \n  dispatch({\n    type: FETCH_USER_DATA,\n    payload: {\n      token: token,\n      user: userRes.data,\n    },\n  });\n};\n\nexport const setUserData = (token, user, dispatch) => {\n  dispatch({\n    type: SET_USER_DATA,\n    payload: {\n      token,\n      user,\n    },\n  });\n};\n\nexport const updateUserImage = (imageUrl, dispatch) => {\n  dispatch({\n    type: UPDATE_USER_IMAGE,\n    payload: imageUrl,\n  });\n};\n","import React, { useReducer, useContext } from \"react\";\nimport userReducer from \"./userReducer\";\nimport { fetchUserData, setUserData, updateUserImage } from \"./helper\";\n\nconst UserStateContext = React.createContext();\nconst UserDispatchContext = React.createContext();\n\nfunction UserProvider({ children }) {\n  const [state, dispatch] = useReducer(userReducer, {\n    token: \"\",\n    user: {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      language: \"\",\n      pictureURL: { url: \"\" },\n    },\n  });\n  return (\n    <UserStateContext.Provider value={state}>\n      <UserDispatchContext.Provider value={dispatch}>\n        {children}\n      </UserDispatchContext.Provider>{\" \"}\n    </UserStateContext.Provider>\n  );\n}\n\nfunction useUserState() {\n  const context = useContext(UserStateContext);\n  return context;\n}\n\nfunction useUserDispatch() {\n  const context = useContext(UserDispatchContext);\n  return context;\n}\n\nexport {\n  UserProvider,\n  useUserState,\n  useUserDispatch,\n  fetchUserData,\n  setUserData,\n  updateUserImage,\n};\n","import openSocket from 'socket.io-client';\n\nconst socket = openSocket(`${process.env.REACT_APP_BACKEND_URL}`);\nexport default socket;","import {\n  FETCH_CONTACTS_INVITATIONS,\n  UPDATE_INVITATIONS,\n  UPDATE_CONTACTS,\n  RESET_LISTS,\n  ADD_UKNOWN_USER\n} from \"../../types\";\n\nexport default function contactsInvitaitionsReducer(state, action) {\n  switch (action.type) {\n    case FETCH_CONTACTS_INVITATIONS: {\n      return {\n        ...state,\n        contacts: action.payload.contacts,\n        invitations: action.payload.invitations,\n      };\n    }\n    case UPDATE_INVITATIONS: {\n      return {\n        ...state,\n        invitations: action.payload,\n      };\n    }\n    case UPDATE_CONTACTS: {\n      return {\n        ...state,\n        contacts: action.payload,\n      };\n    }\n    case ADD_UKNOWN_USER: {\n      return {\n        ...state,\n        unknownUsers: action.payload,\n      }\n    }\n    case RESET_LISTS: {\n      return {\n        contacts: [],\n        invitations: [],\n        unknownUsers: []\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import React, { useReducer, useContext } from \"react\";\nimport contactsInvitaitionsReducer from \"./contactsInvitationsReducer\";\nimport {\n  fetchContactsAndInvitations,\n  deleteContact,\n  approveContact,\n  rejectContact,\n  userEmailFromLocalStorage,\n  createInvitation,\n  findContacts,\n  updateContacts,\n  resetContactsInvitationsLists,\n  addUknownUser,\n} from \"./helper\";\n\nconst ContactsStateContext = React.createContext();\nconst ContactsDispatchContext = React.createContext();\n\nfunction ContactsProvider({ children }) {\n  const [state, dispatch] = useReducer(contactsInvitaitionsReducer, {\n    contacts: {},\n    invitations: [],\n    unknownUsers: [],\n  });\n\n  return (\n    <ContactsStateContext.Provider value={state}>\n      <ContactsDispatchContext.Provider value={dispatch}>\n        {children}\n      </ContactsDispatchContext.Provider>\n    </ContactsStateContext.Provider>\n  );\n}\n\nfunction useContactsState() {\n  const context = useContext(ContactsStateContext);\n  return context;\n}\nfunction useContactsDispatch() {\n  const context = useContext(ContactsDispatchContext);\n  return context;\n}\n\nexport {\n  ContactsProvider,\n  useContactsState,\n  useContactsDispatch,\n  fetchContactsAndInvitations,\n  deleteContact,\n  approveContact,\n  rejectContact,\n  userEmailFromLocalStorage,\n  createInvitation,\n  findContacts,\n  updateContacts,\n  resetContactsInvitationsLists,\n  addUknownUser,\n};\n","import { FETCH_CONVERSATIONS, RESET_CONVERSATIONS } from \"../../types\";\n\nexport default function conversationsReducer(state, action) {\n    switch (action.type) {\n        case FETCH_CONVERSATIONS: {\n            return {\n                conversations: action.payload.conversations,\n            };\n        }\n        case RESET_CONVERSATIONS: {\n            return {\n                conversations: {}\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { FETCH_CONVERSATIONS, RESET_CONVERSATIONS } from \"../../types\";\nimport axios from \"axios\";\n\nexport const fetchConversations = async (email, dispatch) => {\n    const conversationsRes = await axios.get(`/user/${email}/conversations`);\n    if (!conversationsRes.data) {\n        throw Error(\"Oops, no contacts found\");\n    }\n    dispatch({\n        type: FETCH_CONVERSATIONS,\n        payload: {\n            conversations: conversationsRes.data\n        },\n    });\n};\n\nexport const resetConversations = (dispatch) => {\n    dispatch({\n        type: RESET_CONVERSATIONS,\n    });\n};\n","import React, { useReducer, useContext } from \"react\";\nimport conversationsReducer from \"./conversationsReducer\";\nimport { fetchConversations, resetConversations } from \"./helper\";\n\nconst ConversationsStateContext = React.createContext();\nconst ConversationsDispatchContext = React.createContext();\n\nfunction ConversationsProvider({ children }) {\n  const [state, dispatch] = useReducer(conversationsReducer, {\n    conversations: []\n  });\n\n  return (\n    <ConversationsStateContext.Provider value={state}>\n      <ConversationsDispatchContext.Provider value={dispatch}>\n        {children}\n      </ConversationsDispatchContext.Provider>\n    </ConversationsStateContext.Provider>\n  );\n}\n\nfunction useConversationsState() {\n  const context = useContext(ConversationsStateContext);\n  return context;\n}\nfunction useConversationsDispatch() {\n  const context = useContext(ConversationsDispatchContext);\n  return context;\n}\n\nexport {\n  ConversationsProvider,\n  useConversationsState,\n  useConversationsDispatch,\n  fetchConversations,\n  resetConversations\n};\n"],"sourceRoot":""}